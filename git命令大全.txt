相关概念
1. Fast-forward 快进模式，直接把master指向dev的当前提交
2. 分支策略
	在实际开发中，我们应该按照几个基本原则进行分支管理：
	首先，master分支应该是非常稳定的，也就是仅用来发布新版本，
	平时不能在上面干活；那在哪干活呢？干活都在dev分支上，也就
	是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再
	把dev分支合并到master上，在master分支发布1.0版本；
	你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分
	支，时不时地往dev分支上合并就可以了。
	所以，团队合作的分支看起来就像这样：
	git checkout
	其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，
	都可以“一键还原”。
3. 常见分支（习惯性命命名分支）
	a. master 主分支，通常不再该分支工作
	b. dev开发分支，所有人都将自己的分支和分支合并
	c. Bug分支
4. 忽略某些文件时，需要编写.gitignore
   .gitignore文件本身要放到版本库里，
   并且可以对.gitignore做版本管理！
5. 配置命令别名
	#使用st表示status
	#--global参数是全局参数，
	#也就是这些命令在这台电脑的所有Git仓库下都有用。
	git config --global alias.st status

git rm
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，
但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

关联远程仓库：
git remote add origin git@server-name:path/repo-name.git

关联后提交
	第一次提交：git push -u origin master
	第二次无须带参数 -u

仓库克隆
	git clone <地址，eg: git@github.com:wk1034832478/test.git>

查看分支
git branch

创建分支
git branch <name>

切换分支
git branch <name>

创建+切换分支
git checkout -b <name>

合并某分支到当前分支
git merge <name>

#合并某分支到当前分支， 表示禁用Fast forward
git merge --no-ff -m 'merge with no-ff' dev

删除分支
git branch -d <name>
强行删除分支
git branch -D <name>

#打印并查看分支合并图
git log --graph [ --pretty=oneline --abbrev-commit ]

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，
修复后，再git stash pop，回到工作现场。
git stash

#查看远程仓库的信息
git remote

#查看远程仓库更详细的信息
git remote -v

#推送分支
git push origin master

#推送其它分支
git push origin dev

#克隆仓库, 克隆后，默认只能看到master分支
git clone

#从本地推送分支
git push origin branch-name

#创建远程仓库到本地
git checkout -b dev origin/dev

#从远程仓库抓取
git pull

#指定本地dev分支与远程origin/dev分支的链接
git branch --set-upstream-to=origin/dev dev

#rebase操作可以把本地未push的分叉提交历史整理成直线
#rebase的目的是使得我们在查看历史提交的变化时更容易
#因为分叉的提交需要三方对比
git rebase

#打标签
git tag v1.0

#查看标签
git tag

#查看历史版本提交的id
git log --pretty=oneline --abbrev-commit

#为历史提交添加标签tag
git tag v1.0.0 commit-id

#查看某标签信息（包含提交信息）
git show tag-name

#标签总是和某个commit挂钩。
#如果这个commit既出现在master分支，又出现在dev分支，
#那么在这两个分支上都可以看到这个标签
#创建带有说明的标签，用-a指定标签名，-m指定说明文字
git tag -a v0.1 -m "version 0.1 released" 1094adb

#删除标签
git tag -d tag-name

#因为创建的标签都只存储在本地，不会自动推送到远程。
#所以，打错的标签可以在本地安全删除。
#如果要推送某个标签到远程
git push origin <tagname>

#如果标签已经推送到远程，先删除本地，再删除远程
git tag -d v0.9
git push origin :refs/tags/v0.9

